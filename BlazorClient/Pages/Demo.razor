@using RoverSim.Rendering;
@page "/demo"

<h1>Simulation Demo</h1>

<div id=stats>
    <div id=moves-left>Moves Left: @_stats.MovesLeft</div>
    <div id=power>Power: @_stats.Power</div>
    <div id=sample-transmitted-count>Transmitted: @_stats.SamplesTransmitted</div>
</div>

<button @onclick=StartDemo>Start</button>

@code {
    private RoverStats _stats;

    private Task StartDemo()
    {
        SimulationParameters parameters = SimulationParameters.Default;
        ILevelGeneratorFactory levelGeneratorFactory = new OpenCheckingGeneratorFactory(new DefaultLevelGeneratorFactory(), 6);
        ILevelGenerator levelGenerator = levelGeneratorFactory.Create();
        IAiFactory aiFactory = new Ais.FixedStateAiFactory();

        IAi ai = aiFactory.Create(1, parameters);
        Level originalLevel = levelGenerator.Generate(parameters);
        MutableLevel workingLevel = originalLevel.AsMutable();
        Rover rover = new Rover(workingLevel, parameters);
        VisibleState state = VisibleState.GenerateBlank(parameters.BottomRight, parameters.InitialPosition);
        _stats = RoverStats.Create(parameters);

        var actionEnumerator = ai.Simulate(rover.Accessor).GetEnumerator();

        return Task.Run(async () =>
        {
            while (actionEnumerator.MoveNext() && rover.Perform(actionEnumerator.Current, out Update update))
            {
                state.Apply(update);
                _stats = _stats.Add(actionEnumerator.Current, update);
                base.StateHasChanged();
                await Task.Delay(50);
            }
            actionEnumerator.Dispose();
        });
    }
}
